(defwidget bar [screen]
  (centerbox :orientation "v"
    (box :class "segment-top"
         :valign "start"
      (top :screen screen))
    (box :orientation "v"
         :valign "center"
         :class "middle" 
      (center-top :screen screen)
      (middle :screen screen))
    (box :valign "end"
         :class "segment-bottom" 
      (bottom :screen screen))))

(defwidget top [screen]
  (box :orientation "v"
    ;(workspaces :screen {screen == 1 ? "eDP-1" : "HDMI-A-1"}) 
    ;(workspaces : {screen == 1 ? "eDP-1" : "HDMI-A-1"}) 
    (systray :orientation "v" :icon-size 15 :spacing 10)))
  ;(workspaces :wsp_yuck {screen == 1 ? workspaces_1_yuck : workspaces_2_yuck}))

(defwidget workspace [info]
  (button :class "icon ${info.created?:false ? "created" : ""} ${info.mine?:false ? "" : "not-mine"} ${info.focused?:false ? "focused" : ""}" :tooltip "Switch to workspace ${info.id}" :onclick "hyprctl dispatch workspace ${info.id}" "")
)

(defwidget workspaces [statuses]
  (box :class "workspaces" :orientation "h" :spacing 6 :space-evenly false :vexpand false :hexpand false
    (workspace :info {statuses[0]})
    (workspace :info {statuses[1]})
    (workspace :info {statuses[2]})
    (workspace :info {statuses[3]})
    (workspace :info {statuses[4]})
    (workspace :info {statuses[5]})
    (workspace :info {statuses[6]})
    (workspace :info {statuses[7]})
    (workspace :info {statuses[8]})
  )
)

;(defwidget workspaces [screen]
;  (box :orientation "v" :class "workspaces"
;    (for wsp in {workspaces[screen]}
;      (button :class "${wsp.focused ? "active" : "inactive"}"
;              :onclick "swaymsg workspace ${wsp.name}"
;        {wsp.name}))))


;(defwidget workspaces [wsp_yuck]
  ;(literal :content wsp_yuck))

(defwidget center-top [] (notification))

(defwidget middle [] (time))
(defwidget time []
  (box :orientation "v" 
       :class "time"
    hour min sec))


(defwidget metric [icon ?font-size]
  (box :class "metric" 
       :orientation "v"
    (label :class "metric-label"
    :style {font-size != "" ? "font-size: ${font-size}rem;" : ""} 
           :text icon)
    (children)))

(defwidget bottom [screen] 
  (box :orientation "v"
       :valign "end"
       :space-evenly true
       :spacing "5"

    (volume)

    (metric :icon "cpu"
            :font-size 1
            "${round(EWW_CPU.avg, 0)}")

    (metric :icon "ram" "${round(EWW_RAM.used_mem_perc, 0)}")

    (metric :icon "/" 
            :font-size 0.8
      "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}")

    (metric :icon "󰋞" 
            :font-size 0.8
      "${round((1 - (EWW_DISK["/home"].free / EWW_DISK["/home"].total)) * 100, 0)}")

    (metric :icon battery-icon
            :font-size 0.8
            battery-level)

    (box :class "metric" (date))))

(defwidget notification []
  (box :class notification-status-class
       :orientation "v"
       :space-evenly true
       :valign "fill"
       :vexpand false
        (button :onclick "swaync-client -t"
          (label :text notification-status))))

;(defwidget ;bluetooth []
;  (button
;    :class "module-bt module icon"
;    :onclick "blueberry"
;    :tooltip "${bluetooth.text} ${bluetooth.batt_icon}"
;    :style "color: ${bluetooth.color};"
;    {bluetooth.icon} ))

(defwidget volume []
  (box :class "volume-metric"
       :orientation "v"
       :space-evenly true
       :valign "fill"
       :vexpand false
    (scale :orientation "h" 
           :min 0
           :max 100 
           :onchange "pamixer --set-volume $(echo {} | sed 's/\\..*//g')"
           :value volume)
    (eventbox :onscroll "if [ '{}' == 'down' ]; then pamixer -i 5; else pamixer -d 5; fi"
              :vexpand true
              :valign "fill"
      (box :orientation "v"
           :valign "fill"
           :vexpand true
        ; (button :onclick "rofi -show rofi-sound -modi 'rofi-sound:rofi-sound-output-chooser' &"
        (button :onclick "pavucontrol &"
                ; :onrightclick "./audio.sh toggle"
                
          (label :text audio_sink))))))


(defwidget large-sym [sym]
  (label :class "metric-icon large-symbol" :text sym))

(defwidget date []
  (box :orientation "v" 
       :halign "center" 
    day_word day month_word))

; TODO make this not hacky
(defvar audio_sink "")

(deflisten volume :initial "0" "./audio.sh volume")
(deflisten notification-status :initial "󰂜" "./notification.sh symbol")
(deflisten notification-status-class :initial "" "./notification.sh class")
(deflisten workspaces :initial "[{}, {}, {}, {}, {}, {}, {}, {}, {}]" "./hypr.sh workspaces left")
;(deflisten bluetooth "bluetooth")

(defpoll battery-level :interval "1s"	"./battery.sh percent")
(defpoll battery-icon :interval "1s" "./battery.sh icon")

(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll sec  :interval "1s" "date +%S")

(defpoll day_word :interval "10m" "date +%a | tr [:upper:] [:lower:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month_word    :interval "1h"  "date +%b | tr [:upper:] [:lower:]")

(defvar workspaces_1_yuck "")
(defvar workspaces_2_yuck "")


(defwindow bar_1
  :monitor '["<primary>", "DisplayPort-0", "PHL 345B1C"]'
  :stacking "fg"
  :geometry (geometry :x 0 :y 0 :width "40px" :height "100%" :anchor "center right")
  :reserve (struts :distance "40px" :side "left")
  :exclusive true
  ;:focusable true
  (bar :screen 1))

(defwindow bar_2
  :monitor '[2, "HDMI-A-1"]'
  :geometry (geometry :x 0 :y 0 :width "40px" :height "100%" :anchor "top right")
  :reserve (struts :distance "40px" :side "left")
  (bar :screen 2))

