syntax on

set noerrorbells
set tabstop=2 softtabstop=2
set shiftwidth=2
set expandtab
set smartindent
set nu rnu
set nowrap
set smartcase
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set backspace=indent,eol,start
set signcolumn=number
set clipboard=unnamedplus

"set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey

" Space as leader key
let mapleader = " "

" debug c++ program
"nnoremap <leader>d :!g++ -g -o  %:r+debug.out % -std=c++11 && gdb %:r+debug.out<Enter>
" toggle termguicolors
nnoremap <Leader>c :set tgc!<Enter>
" buffer jumping
nnoremap <Leader>p :bp<CR>
nnoremap <Leader>o :bn<CR>
" Use <Tab> and <S-Tab> for navigate completion list                            
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"                        
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugin manager
Plugin 'gmarik/Vundle.vim'

" Code completion engine
Plugin 'ycm-core/YouCompleteMe'
" Git
Plugin 'tpope/vim-fugitive'
" View man pages
"Plugin 'vim-utils/vim-man'
" Undo tree/tab
"Plugin 'mbbill/undotree'
" Language packs
Plugin 'sheerun/vim-polyglot'
" Fuzzy finder
Plugin 'junegunn/fzf', { 'do': 'make fzf' }
Plugin 'junegunn/fzf.vim'
" Changes working directory to project root
"Plugin 'airblade/vim-rooter'
"todo list for projects
"Plugin 'vuciv/vim-bujo'
"make smth??
"Plugin 'tpope/vim-dispatch'
" Theme
Plugin 'morhetz/gruvbox'
" Display colors for color codes
Plugin 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
" File tree
Plugin 'preservim/nerdtree'
" Fancy start screen
Plugin 'mhinz/vim-startify'
" Linter
Plugin 'dense-analysis/ale'
" Debugger
Plugin 'puremourning/vimspector'
" Maximize window
Plugin 'szw/vim-maximizer'
" minpac
"call minpac#add('rrethy/vim-hexokinase', { 'do': 'make hexokinase' })

" dein
"call dein#add('rrethy/vim-hexokinase', { 'build': 'make hexokinase' })" Plugin 'ap/vim-css-color'

call vundle#end()
filetype plugin indent on
colorscheme gruvbox 
set background=dark
set termguicolors
"let g:ycm_clangd_binary_path = "/usr/bin/clangd"
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"
"Disables documentation info popup on variable or function hover
let g:ycm_auto_hover=''

set completeopt-=preview

nnoremap <leader>n :NERDTreeFocus<CR>

" save and run c++ program
autocmd filetype cpp nnoremap <Leader> <Return> :w <Bar> !g++ -o  %:r.out % -std=c++11 && ./%:r.out<CR>
autocmd filetype sh nnoremap <Leader> <Return> :w <bar> exec '!./'.shellescape('%')<CR>
autocmd filetype python nnoremap <Leader> <Return> :w <bar> exec '!python '.shellescape('%')<CR>

let g:NERDTreeMapActivateNode = "l"
let g:NERDTreeMapCloseDir = "h"
let g:Hexokinase_highlighters = ['backgroundfull']

" FZF configuration =========================
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

map <leader>f :Files<CR>
map <leader>b :Buffers<CR>
nnoremap <leader>g :Rg<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>m :Marks<CR>


let g:fzf_tags_command = 'ctags -R'
" Border color
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

"let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --preview 'bat --color=always --style=header,grid --line-range :300 {}'"
let $FZF_DEFAULT_COMMAND="rg --files --hidden -g '!{node_modules/*,.git/*}'" 

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"Get Files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)


" Get text in files with Rg
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" Git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

" Linter
let g:ale_linters = {'python': ['flake8'], 'javascript': ['eslint']}
let g:ale_fixers = {'python': ['black'], 'javascript': ['prettier', 'eslint']}
let g:ale_fix_on_save = 1

" Debugger
"let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
fun! GotoWindow(id)
    call win_gotoid(a:id)
    "MaximizerToggle
endfun

" Debugger remaps
nnoremap <leader>m :MaximizerToggle!<CR>
nnoremap <leader>dd :call vimspector#Launch()<CR>
nnoremap <leader>dc :call GotoWindow(g:vimspector_session_windows.code)<CR>
nnoremap <leader>di :VimspectorShowOutput Console<CR>
nnoremap <leader>dt :call GotoWindow(g:vimspector_session_windows.tagpage)<CR>
nnoremap <leader>dv :call GotoWindow(g:vimspector_session_windows.variables)<CR>
nnoremap <leader>dw :call GotoWindow(g:vimspector_session_windows.watches)<CR>
nnoremap <leader>ds :call GotoWindow(g:vimspector_session_windows.stack_trace)<CR>
nnoremap <leader>do :call GotoWindow(g:vimspector_session_windows.output)<CR>
nnoremap <leader>de :call vimspector#Reset()<CR>

nnoremap <leader>dtcb :call vimspector#CleanLineBreakpoint()<CR>

nmap <leader>dl <Plug>VimspectorStepInto
nmap <leader>dj <Plug>VimspectorStepOver
nmap <leader>dk <Plug>VimspectorStepOut
nmap <leader>d_ <Plug>VimspectorRestart
nnoremap <leader>d<space> :call vimspector#Continue()<CR>

nmap <leader>drc <Plug>VimspectorRunToCursor
nmap <leader>db <Plug>VimspectorToggleBreakpoint
nmap <leader>dp <Plug>VimspectorToggleConditionalBreakpoint

" <Plug>VimspectorStop
" <Plug>VimspectorPause

nnoremap <Leader>k :wincmd k<CR>
nnoremap <Leader>j :wincmd j<CR>
nnoremap <Leader>h :wincmd h<CR>
nnoremap <Leader>l :wincmd l<CR>

" <Plug>VimspectorAddFunctionBreakpoint
