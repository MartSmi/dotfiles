syntax on
set backspace=indent,eol,start
set hidden
set noswapfile
set nu rnu
set clipboard=unnamedplus
set path=.,**
set shiftwidth=2 tabstop=2 softtabstop=2 expandtab autoindent smartindent
set autowrite
set wildmode=longest,list,full
set wildmenu
set scl=number
set linebreak
set background=dark

let mapleader = " "
" Open terminal on vim start
"autocmd vimenter * below terminal ++rows=6

" Auto save on write
"autocmd TextChanged,TextChangedI <buffer> silent write
set foldmethod=marker

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugin manager
Plugin 'gmarik/Vundle.vim'

" Code completion engine
Plugin 'ycm-core/YouCompleteMe'
" Git
"Plugin 'tpope/vim-fugitive'
" View man pages
"Plugin 'vim-utils/vim-man'
" Undo tree/tab
"Plugin 'mbbill/undotree'
" Language packs
Plugin 'sheerun/vim-polyglot'
" Fuzzy finder
Plugin 'junegunn/fzf', { 'do': 'make fzf' }
Plugin 'junegunn/fzf.vim'
" Changes working directory to project root
"Plugin 'airblade/vim-rooter'
"todo list for projects
"Plugin 'vuciv/vim-bujo'
"make smth??
"Plugin 'tpope/vim-dispatch'
" Theme
Plugin 'gruvbox-community/gruvbox'
" Display colors for color codes
"Plugin 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
" File tree
Plugin 'preservim/nerdtree'
" Fancy start screen
Plugin 'mhinz/vim-startify'
" Linter
"Plugin 'dense-analysis/ale'
" Debugger
Plugin 'puremourning/vimspector'
Plugin 'sagi-z/vimspectorpy', { 'do': { -> vimspectorpy#update() } }
" Maximize window
Plugin 'szw/vim-maximizer'
Plugin 'Raimondi/delimitMate'
" Center window horizontally
Plugin 'jmckiern/vim-venter'
" Autosave
"Plugin '907th/vim-auto-save'
" LaTex
Plugin 'lervag/vimtex'

Plugin 'godlygeek/tabular'
Plugin 'preservim/vim-markdown'

call vundle#end()
filetype plugin indent on
colorscheme gruvbox 
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_borderless_table = 1

set termguicolors
"let g:ycm_clangd_binary_path = "/usr/bin/clangd"
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"
"Disables documentation info popup on variable or function hover
let g:ycm_auto_hover=''
"let g:ycm_enable_diagnostic_signs = 0
"let g:ycm_enable_diagnostic_highlighting = 0

set completeopt-=preview

let g:fzf_history_dir = '~/.local/share/fzf-history'

let g:fzf_tags_command = 'ctags -R'
" Border color
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

"let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --preview 'bat --color=always --style=header,grid --line-range :300 {}'"
let $FZF_DEFAULT_COMMAND="rg --files --hidden -g '!{node_modules/*,.git/*}'" 

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"Get Files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)


" Get text in files with Rg
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" Git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)


nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <leader>lcd :lcd %:p:h<CR>:pwd<CR>
nnoremap <leader>k :make <CR>

"map <leader>f :Files<CR>
map <leader>f :FZF<CR>
map <leader>b :Buffers<CR>
nnoremap <leader>g :Rg<CR>
"nnoremap <leader>t :Tags<CR>
"nnoremap <leader>m :Marks<CR>
nnoremap <leader>d :YcmCompleter GoTo<CR>

nnoremap <leader>w :w!<CR>

map <leader>t :vert rightb term<CR>
map <leader>ve :e $MYVIMRC<CR>
map <leader>vs :source $MYVIMRC<CR>
map <leader>h :VenterToggle<CR>

map gf :e <cfile><CR>
" Change terminal status line color
"hi StatusLineTerm guibg=white guifg=blue
"hi StatusLineTermNC guibg=white guifg=blue
let delimitMate_expand_cr = 1
" Custom functions
" The function Nr2Bin() returns the binary string representation of a number.
func Nr2Bin(nr)
  let n = a:nr
  let r = ""
  while n
    let r = '01'[n % 2] . r
    let n = n / 2
  endwhile
  return r
endfunc

"LaTex
" This is necessary for VimTeX to load properly. The "indent" is optional.
" Note that most plugin managers will do this automatically.
"filetype plugin indent on

" This enables Vim's and neovim's syntax-related features. Without this, some
" VimTeX features will not work (see ":help vimtex-requirements" for more
" info).
" syntax enable

" Viewer options: One may configure the viewer either by specifying a built-in
" viewer method:
let g:vimtex_view_method = 'zathura'

" Or with a generic interface:
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'

" VimTeX uses latexmk as the default compiler backend. If you use it, which is
" strongly recommended, you probably don't need to configure anything. If you
" want another compiler backend, you can change it as follows. The list of
" supported backends and further explanation is provided in the documentation,
" see ":help vimtex-compiler".
let g:vimtex_compiler_method = 'latexmk'

" Most VimTeX mappings rely on localleader and this can be changed with the
" following line. The default is usually fine and is the symbol "\".
let maplocalleader = ","

" Latex specification
au BufNewFile,BufRead *.tex
    \ set nocursorline |
    \ set nornu |
    \ set number |
    \ let g:loaded_matchparen=1 |

au BufNewFile,BufRead *.s
    \ set ft=asm | 
    \ set makeprg=gcc\ -g\ -no-pie\ -o\ main\ %\ &&\ ./main

hi NonText guifg=bg
